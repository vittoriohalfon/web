/**
 * This code was generated by Builder.io
 */
import React, { useState, useEffect } from "react";

// Define the form data interface
interface FormData {
  companyName: string;
  website: string;
  turnover: string;
  location: string;
  experienceWithTenders: boolean;
  industrySector: string;
  companyOverview: string;
  coreProducts: string;
  demographic: string;
  uniqueSellingPoint: string;
  geographic: string;
}

// Add default form values
const DEFAULT_FORM_DATA: FormData = {
  companyName: '',
  website: '',
  turnover: '',
  location: '',
  experienceWithTenders: false,
  industrySector: '',
  companyOverview: '',
  coreProducts: '',
  demographic: '',
  uniqueSellingPoint: '',
  geographic: ''
};

interface ProfileFormProps {
  profile: FormData | null; // Update to allow null
  loading: boolean;
  saving: boolean;
  saved: boolean;
  onUpdateProfile: (data: FormData) => void;
}

const COUNTRIES = [
  "Austria", "Belgium", "Bulgaria", "Croatia", "Cyprus", 
  "Czech Republic", "Denmark", "Estonia", "Finland", "France",
  "Germany", "Greece", "Hungary", "Ireland", "Italy", 
  "Latvia", "Lithuania", "Luxembourg", "Malta", "Netherlands",
  "Poland", "Portugal", "Romania", "Slovakia", "Slovenia",
  "Spain", "Sweden", "Other (please specify)"
];

const TURNOVER_OPTIONS = [
  "Less than €1M", "€1M - €5M", "€5M - €10M", "€10M+"
];

export const ProfileForm: React.FC<ProfileFormProps> = ({
  profile: initialProfile,
  loading,
  saving,
  saved,
  onUpdateProfile,
}) => {
  // Initialize with default values
  const [formData, setFormData] = useState<FormData>(initialProfile || DEFAULT_FORM_DATA);

  useEffect(() => {
    if (initialProfile) {
      setFormData(initialProfile);
    }
  }, [initialProfile]);

  if (loading) {
    return <div>Loading...</div>;
  }

  const handleInputChange = (field: keyof FormData, value: string | boolean) => {
    setFormData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  return (
    <form
      onSubmit={(e) => {
        e.preventDefault();
        onUpdateProfile(formData);
      }}
    >
      <div className="flex flex-col w-full max-md:max-w-full">
        <div className="flex flex-col w-full bg-white max-md:max-w-full">
          <div className="flex flex-col w-full max-md:max-w-full">
            <div className="flex flex-col w-full leading-tight max-md:max-w-full">
              <h1 className="text-2xl font-semibold text-neutral-950 max-md:max-w-full">
                Company Profile
              </h1>
              <p className="mt-2 text-base text-zinc-600 max-md:max-w-full">
                Let's set up your organization.
              </p>
            </div>
            <div className="flex flex-wrap gap-4 items-start mt-8 w-full text-neutral-950 max-md:max-w-full">
              <div className="flex flex-col flex-1 shrink basis-0 min-w-[240px] max-md:max-w-full">
                <label
                  htmlFor="companyName"
                  className="text-sm font-medium max-md:max-w-full"
                >
                  Company Name*
                </label>
                <input
                  type="text"
                  id="companyName"
                  className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
                  value={formData.companyName}
                  onChange={(e) => handleInputChange('companyName', e.target.value)}
                />
              </div>
              <div className="flex flex-col flex-1 shrink basis-0 min-w-[240px] max-md:max-w-full">
                <label
                  htmlFor="companyWebsite"
                  className="text-sm font-medium max-md:max-w-full"
                >
                  Company Website*
                </label>
                <input
                  type="url"
                  id="companyWebsite"
                  className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base whitespace-nowrap bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
                  value={formData.website}
                  onChange={(e) => handleInputChange('website', e.target.value)}
                />
              </div>
            </div>
          </div>
          <div className="flex flex-col mt-4 w-full text-neutral-950 max-md:max-w-full">
            <label
              htmlFor="annualTurnover"
              className="text-sm font-medium max-md:max-w-full"
            >
              Annual Turnover Estimation*
            </label>
            <select
              id="annualTurnover"
              className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
              value={formData.turnover}
              onChange={(e) => handleInputChange('turnover', e.target.value)}
            >
              {TURNOVER_OPTIONS.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))}
            </select>
          </div>
          <div className="flex flex-col mt-4 w-full text-neutral-950 max-md:max-w-full">
            <label
              htmlFor="businessLocation"
              className="text-sm font-medium max-md:max-w-full"
            >
              What is your primary location of business instead of the
              geographic location of business?
            </label>
            <select
              id="businessLocation"
              className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base whitespace-nowrap bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
              value={formData.location}
              onChange={(e) => handleInputChange('location', e.target.value)}
            >
              {COUNTRIES.map((country) => (
                <option key={country} value={country}>
                  {country}
                </option>
              ))}
            </select>
          </div>
          <div className="flex flex-col items-start mt-4 w-full max-md:max-w-full">
            <div className="flex gap-2 items-center max-md:max-w-full">
              <input
                type="checkbox"
                id="tenderExperience"
                className="w-4 h-4 bg-white rounded border border-solid border-stone-300 min-h-[16px]"
                checked={formData.experienceWithTenders}
                onChange={(e) => handleInputChange('experienceWithTenders', e.target.checked)}
              />
              <label
                htmlFor="tenderExperience"
                className="self-stretch my-auto text-base font-medium text-neutral-950 max-md:max-w-full"
              >
                Do you have experience applying for government tenders?
              </label>
            </div>
          </div>
          <button
            type="button"
            className="flex gap-2 justify-center items-center self-end px-4 py-2.5 mt-4 text-base text-center text-indigo-700 whitespace-nowrap rounded-lg border border-indigo-700 border-solid"
          >
            <span className="self-stretch my-auto">AutoFill</span>
            <img
              loading="lazy"
              src="https://cdn.builder.io/api/v1/image/assets/27ce83af570848e9b22665bc31a03bc0/8b18392d7c96b03871d68de0edec81837db35e4b3607b67af1d3fb095ebbb889?apiKey=27ce83af570848e9b22665bc31a03bc0&"
              alt=""
              className="object-contain shrink-0 self-stretch my-auto w-5 aspect-square"
            />
          </button>
        </div>
        <div className="flex flex-col mt-12 w-full text-neutral-950 max-md:mt-10 max-md:max-w-full">
          <div className="flex flex-col w-full max-md:max-w-full">
            <label
              htmlFor="industrySector"
              className="text-sm font-medium max-md:max-w-full"
            >
              Industry Sector
            </label>
            <input
              type="text"
              id="industrySector"
              className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
              value={formData.industrySector}
              onChange={(e) => handleInputChange('industrySector', e.target.value)}
            />
          </div>
          <div className="flex flex-col mt-4 w-full max-md:max-w-full">
            <label
              htmlFor="companyOverview"
              className="text-sm font-medium max-md:max-w-full"
            >
              Company Overview
            </label>
            <textarea
              id="companyOverview"
              className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base leading-6 bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
              rows={4}
              value={formData.companyOverview}
              onChange={(e) => handleInputChange('companyOverview', e.target.value)}
            ></textarea>
          </div>
          <div className="flex flex-col justify-center mt-4 w-full max-md:max-w-full">
            <div className="flex flex-col w-full max-md:max-w-full">
              <label
                htmlFor="coreProducts"
                className="text-sm font-medium max-md:max-w-full"
              >
                Core Products / Service
              </label>
              <textarea
                id="coreProducts"
                className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base leading-6 bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
                rows={4}
                value={formData.coreProducts}
                onChange={(e) => handleInputChange('coreProducts', e.target.value)}
              ></textarea>
            </div>
            <div className="flex flex-col mt-4 w-full max-md:max-w-full">
              <label
                htmlFor="demographic"
                className="text-sm font-medium max-md:max-w-full"
              >
                Demographic
              </label>
              <textarea
                id="demographic"
                className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base leading-6 bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
                rows={4}
                value={formData.demographic}
                onChange={(e) => handleInputChange('demographic', e.target.value)}
              ></textarea>
            </div>
          </div>
          <div className="flex flex-col justify-center mt-4 w-full max-md:max-w-full">
            <div className="flex flex-col w-full max-md:max-w-full">
              <label
                htmlFor="uniqueSellingPoint"
                className="text-sm font-medium max-md:max-w-full"
              >
                Unique Selling Point
              </label>
              <textarea
                id="uniqueSellingPoint"
                className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base leading-6 bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
                rows={3}
                value={formData.uniqueSellingPoint}
                onChange={(e) => handleInputChange('uniqueSellingPoint', e.target.value)}
              ></textarea>
            </div>
            <div className="flex flex-col mt-4 w-full max-md:max-w-full">
              <label
                htmlFor="geographic"
                className="text-sm font-medium max-md:max-w-full"
              >
                Geographic
              </label>
              <textarea
                id="geographic"
                className="flex gap-2 items-center px-3.5 py-2.5 mt-1.5 w-full text-base leading-6 bg-white rounded-lg border border-solid border-zinc-300 max-md:max-w-full"
                rows={4}
                value={formData.geographic}
                onChange={(e) => handleInputChange('geographic', e.target.value)}
              ></textarea>
            </div>
          </div>
        </div>
        <div className="flex flex-col mt-6 w-full text-base text-center text-white whitespace-nowrap max-md:max-w-full">
          <div className="flex flex-col items-end w-full max-md:max-w-full">
            <button
              type="submit"
              className="flex gap-2 justify-center items-center px-4 py-2.5 bg-indigo-700 rounded-lg border border-indigo-600 border-solid"
              disabled={saving}
            >
              {saving ? (
                <span>Saving...</span>
              ) : saved ? (
                <span>Saved!</span>
              ) : (
                <span>Save</span>
              )}
            </button>
          </div>
        </div>
      </div>
    </form>
  );
};
