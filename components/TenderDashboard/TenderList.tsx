/**
 * This code was generated by Builder.io
 */
'use client';
import React, { useEffect, useState } from "react";
import { TenderCard } from "./TenderCard";
import { useAuth } from "@clerk/nextjs";

interface Tender {
  title: string;
  description: string;
  amount: number | null;
  currency: string | null;
  status: string;
  match_percentage: number;
  published: string;
  deadline?: string;
  buyer?: {
    name: string;
    location: {
      country: string;
    }
  }
}

export const TenderList: React.FC = () => {
  const [tenders, setTenders] = useState<Tender[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const { getToken } = useAuth();

  useEffect(() => {
    const fetchTenders = async () => {
      try {
        // Get the session token
        const sessionToken = await getToken();
        
        const response = await fetch('/api/similarity-search', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${sessionToken}`,
          },
        });
        
        if (!response.ok) {
          throw new Error('Failed to fetch tenders');
        }

        const data = await response.json();
        setTenders(data.contracts || []);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Failed to load tenders');
      } finally {
        setLoading(false);
      }
    };

    fetchTenders();
  }, [getToken]);

  if (loading) {
    return <div className="p-6">Loading tenders...</div>;
  }

  if (error) {
    return <div className="p-6 text-red-500">Error: {error}</div>;
  }

  return (
    <div className="flex flex-col gap-4 p-6 w-full max-md:px-5 max-md:max-w-full">
      {tenders.map((tender, index) => (
        <TenderCard 
          key={index} 
          tender={{
            title: tender.title,
            description: tender.description,
            match: tender.match_percentage,
            budget: tender.amount ? `${tender.currency} ${tender.amount.toLocaleString()}` : 'Not specified',
            country: tender.buyer?.location?.country || 'Unknown',
            countryFlag: `/flags/${tender.buyer?.location?.country?.toLowerCase() || 'unknown'}.svg`,
            lots: 1, // This information isn't available in the API response
            status: tender.status === 'green' ? 'Active' : tender.status === 'yellow' ? 'Pending' : 'Closed',
            posted: new Date(tender.published).toLocaleDateString('en-US', { 
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            }),
            submissionDate: tender.deadline ? new Date(tender.deadline).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric'
            }) : 'N/A',
            dueIn: tender.deadline ? getDaysRemaining(new Date(tender.deadline)) : 'Not specified',
          }}
        />
      ))}
    </div>
  );
};

function getDaysRemaining(deadline: Date): string {
  const today = new Date();
  const diffTime = deadline.getTime() - today.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return `${diffDays} days`;
}
