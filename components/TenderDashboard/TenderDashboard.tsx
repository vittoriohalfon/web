/**
 * This code was generated by Builder.io
 */
import React, { useState, useEffect } from "react";
import { Sidebar } from "../shared/Sidebar";
import { SearchBar } from "./SearchBar";
import { TenderList } from "./TenderList";
import { Header } from "../shared/Header";
import { Tender, ApiContract } from "@/types/tender";
import { usePathname } from 'next/navigation';

interface TenderDashboardProps {
  initialTenders?: Tender[];
  tenders?: Tender[];
  loading: boolean;
  error: string | null;
  setLoading?: (loading: boolean) => void;
  setError?: (error: string | null) => void;
}

export const TenderDashboard: React.FC<TenderDashboardProps> = ({ 
  initialTenders = [], 
  tenders: propTenders,
  loading, 
  error,
  setLoading,
  setError 
}) => {
  const pathname = usePathname();
  const isDashboard = pathname === '/home';
  const [localTenders, setLocalTenders] = useState<Tender[]>(propTenders || initialTenders);
  const [isSearching, setIsSearching] = useState(false);

  // Default handlers if not provided
  const handleSetLoading = setLoading || (() => {});
  const handleSetError = setError || (() => {});

  // Update tenders when initialTenders or propTenders changes
  useEffect(() => {
    if (!isSearching) {
      setLocalTenders(propTenders || initialTenders);
    }
  }, [initialTenders, propTenders, isSearching]);

  const handleSearchResults = (results: ApiContract[]) => {
    setIsSearching(true);
    const mappedTenders: Tender[] = results.map((tender) => ({
      ...tender,
      isLiked: tender.is_liked
    }));
    setLocalTenders(mappedTenders);
  };

  return (
    <div className="flex overflow-hidden bg-white">
      <Sidebar />
      <main className="flex flex-col flex-1 ml-[312px] min-w-[240px] max-md:ml-0 max-md:max-w-full">
        <Header userCreatedAt={new Date()} showNav={false} />
        {isDashboard && (
          <section className="flex flex-col justify-center p-6 w-full bg-white border-t border-b border-solid border-y-zinc-300 max-md:px-5 max-md:max-w-full">
            <SearchBar 
              onSearchResults={handleSearchResults}
              setLoading={handleSetLoading}
              setError={handleSetError}
            />
          </section>
        )}
        <TenderList 
          tenders={localTenders} 
          loading={loading} 
          error={error}
        />
      </main>
    </div>
  );
};
