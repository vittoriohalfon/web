generator client {
  provider      = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id                   Int       @id @default(autoincrement())
  user                 User      @relation(fields: [userId], references: [id])
  userId               Int
  stripeSubscriptionId String    @unique
  status               String
  priceId              String
  createdAt            DateTime  @default(now())
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
}

model User {
  id              Int               @id @default(autoincrement())
  clerkId         String            @unique
  name            String?
  email           String            @unique
  createdAt       DateTime          @default(now())
  setupComplete   Boolean           @default(false)
  company         Company?
  likedContracts  LikedContract[]
  preferences     UserPreference?
  subscriptions   Subscription[]
}

model Company {
  id                     Int      @id @default(autoincrement())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 Int      @unique
  name                   String
  website                String
  annualTurnover         String?
  primaryLocation        String?
  primaryFocus           String?
  experienceWithTenders  Boolean  @default(false)
  industrySector         String?
  companyOverview        String?
  coreProductsServices   String?
  demographic            String?
  uniqueSellingPoint     String?
  geographicFocus        String?
  pastPerformances       PastPerformance[]
}

model PastPerformance {
  id          Int      @id @default(autoincrement())
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   Int
  fileUrl     String
  fileName    String
  size        Int
  uploadedAt  DateTime @default(now())
  contentType String?
}

model UserPreference {
  id             Int    @id @default(autoincrement())
  user           User   @relation(fields: [userId], references: [id])
  userId         Int    @unique
  goal           String?
  referralSource String?
}

model LikedContract {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
  contractNoticeId String
  likedAt          DateTime @default(now())
  requestedSummary Boolean  @default(false)
  @@unique([userId, contractNoticeId])
}